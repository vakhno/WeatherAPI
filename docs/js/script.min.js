"use strict"; var api = { url: "https://api.openweathermap.org/data/2.5/", key: "b7bf80efafd4a87d928b38d509b14759" }, appendNumber = 1, current = 0, countOfDays = 0, countOfHours = 0, newDayNumber = 0; function createFirstCard(e, t) { countOfDays = 0, newDayNumber = 0, document.querySelector(".weather-API__addNewDay") && document.querySelector(".weather-API__addNewDay").remove(); var r = document.createElement("div"); r.classList.add("weather-card"), r.dataset.weatherCounter, r.dataset.weatherCounter = newDayNumber, r.dataset.cardNumber, r.dataset.cardNumber = 0, r.classList.add("new-card-number-0"), document.querySelector(".weather-API__cards").prepend(r); var a = document.createElement("div"); a.classList.add("weather-card__info"), document.querySelector(".weather-card").prepend(a); var c = document.createElement("div"); c.classList.add("weather-card__place"), document.querySelector(".weather-card__info").prepend(c); var n = document.createElement("div"); n.classList.add("weather-card__city"), document.querySelector(".weather-card__place").prepend(n); var d = document.createElement("sup"); d.classList.add("weather-card__country"), document.querySelector(".weather-card__city").after(d); var o = document.createElement("div"); o.classList.add("weather-card__time"), document.querySelector(".weather-card__place").after(o); var u = document.createElement("div"); u.classList.add("weather-card__temperature"), document.querySelector(".weather-card__time").after(u); var s = document.createElement("div"); s.classList.add("weather-card__real-degree"), document.querySelector(".weather-card__temperature").prepend(s); var i = document.createElement("div"); i.classList.add("weather-card__feels-degree"), document.querySelector(".weather-card__real-degree").after(i); var l = document.createElement("button"); l.classList.add("weather-API__addNewDay"), l.textContent = "add new day", document.querySelector(".weather-API__cards").after(l); var _ = document.createElement("div"); _.classList.add("weather-card__changeHours"), document.querySelector(".weather-card__info").after(_); var m = document.createElement("button"); m.textContent = "+3 hours", m.classList.add("weather-card__plus3Hours"), document.querySelector(".weather-card__changeHours").prepend(m); var w = document.createElement("button"); w.textContent = "-3 hours", w.classList.add("weather-card__minus3Hours"), document.querySelector(".weather-card__plus3Hours").before(w); var h = document.createElement("div"); h.classList.add("weather-card__icon"), document.querySelector(".weather-card__temperature").after(h); var p = document.createElement("div"); p.classList.add("weather-card__status"), document.querySelector(".weather-card__icon").after(p), console.log(t.weather[0].icon), document.querySelector(".weather-card__city").textContent = e.city.name, document.querySelector(".weather-card__country").textContent = e.city.country, document.querySelector(".weather-card__time").textContent = t.dt_txt, document.querySelector(".weather-card__real-degree").innerHTML = (t.main.temp - 273).toFixed(1) + "&deg", document.querySelector(".weather-card__feels-degree").innerHTML = "feels like: " + (t.main.feels_like - 273).toFixed(1) + "&deg", document.querySelector(".weather-card__icon").innerHTML = "<img src='https://openweathermap.org/img/wn/".concat(t.weather[0].icon, "@2x.png'>"), document.querySelector(".weather-card__status").textContent = t.weather[0].description } document.querySelector(".input").addEventListener("keypress", (function (e) { return 13 === e.keyCode ? getWeather(this.value) : 0 })); var newInfoCard = function (e) { var t, r = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; if (r) t = r.target.parentNode.parentNode.classList[1]; else { var a = document.createElement("div"); (a = document.querySelector(".weather-card").cloneNode(!0)).classList.remove("new-card-number-0"), a.classList.add("new-card-number-".concat(countOfDays)), a.dataset.cardNumber = countOfDays, a.dataset.weatherCounter = newDayNumber, 1 == countOfDays ? document.querySelector(".weather-card").after(a) : document.querySelector(".new-card-number-".concat(countOfDays - 1)).after(a), t = "new-card-number-".concat(countOfDays) } document.querySelector(".".concat(t, " > .weather-card__info > .weather-card__time")).innerHTML = e.dt_txt, document.querySelector(".".concat(t, " > .weather-card__info > .weather-card__temperature > .weather-card__real-degree")).innerHTML = (e.main.temp - 273).toFixed(1) + "&deg", document.querySelector(".".concat(t, " > .weather-card__info > .weather-card__temperature > .weather-card__feels-degree")).innerHTML = "feels like: " + (e.main.feels_like - 273).toFixed(1) + "&deg", document.querySelector(".".concat(t, " > .weather-card__info > .weather-card__icon")).innerHTML = "<img src='https://openweathermap.org/img/wn/".concat(e.weather[0].icon, "@2x.png'>"), document.querySelector(".".concat(t, " > .weather-card__info > .weather-card__status")).innerHTML = e.weather[0].description }, getWeather = function (e) { fetch("".concat(api.url, "forecast?q=").concat(e, "&inits=metric&APPID=").concat(api.key)).then((function (e) { if (e.status >= 200 && e.status < 300) return e; var t = new Error(e.statusText); throw t.response = e, t })).then((function (e) { return e.json() })).then(displayWeather).catch((function (e) { console.log("Error: " + e.message), console.log(e.response) })) }; function displayWeather(e) { for (var t = document.querySelector(".weather-API__cards"); t.firstChild;)t.removeChild(t.firstChild); createFirstCard(e, e.list[0]), document.querySelector(".weather-API__addNewDay").onclick = function (t) { var r = +e.list[newDayNumber].dt_txt.split(" ", 2)[0].split("-")[2], a = +e.list[newDayNumber].dt_txt.split("-", 2)[1], c = +e.list[newDayNumber].dt_txt.split("-", 2)[0]; if (++countOfDays < 4) { var n = e.list.find((function (e, t) { var n = e.dt_txt.split(" ", 2)[0].split("-")[2], d = e.dt_txt.split("-", 2)[1], o = e.dt_txt.split("-", 2)[0]; if (newDayNumber = t, n < r && d > a || n > r && d == a || o > c && d < a) return e })); newInfoCard(n) } else t.target.style.display = "none", countOfDays = 0, newDayNumber = 0 }, document.querySelector(".weather-API__cards").onclick = function (t) { if (t.target.matches("button.weather-card__plus3Hours")) { t.target.parentNode.parentNode.getAttribute("data-weather-counter"); var r = +document.querySelector(".".concat(t.target.parentNode.parentNode.classList[1], " > .weather-card__info > .weather-card__time")).textContent.split(" ", 2)[0].split("-")[2], a = +document.querySelector(".".concat(t.target.parentNode.parentNode.classList[1], " > .weather-card__info > .weather-card__time")).textContent.split(" ", 2)[1].split(":")[0], c = e.list.find((function (e, t) { if (+e.dt_txt.split(" ", 2)[1].split(":")[0] > a && +e.dt_txt.split(" ", 2)[0].split("-")[2] === r) return console.log("+"), e })); if (void 0 === c) return 0; newInfoCard(c, t) } else { if (!t.target.matches("button.weather-card__minus3Hours")) return !1; t.target.parentNode.parentNode.getAttribute("data-weather-counter"); var n = +document.querySelector(".".concat(t.target.parentNode.parentNode.classList[1], " > .weather-card__info > .weather-card__time")).textContent.split(" ", 2)[0].split("-")[2], d = +document.querySelector(".".concat(t.target.parentNode.parentNode.classList[1], " > .weather-card__info > .weather-card__time")).textContent.split(" ", 2)[1].split(":")[0], o = e.list.find((function (e, t) { if (d - +e.dt_txt.split(" ", 2)[1].split(":")[0] == 3 && +e.dt_txt.split(" ", 2)[0].split("-")[2] === n) return console.log("-"), e })); if (void 0 === o) return 0; newInfoCard(o, t) } } }
//# sourceMappingURL=data:application/json;charset=utf8;base64,
